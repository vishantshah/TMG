<apex:page controller="E2CP.Config0" tabStyle="setup_wizard__tab" action="{!SetDefaults}" id="pg">

<style>
.helpimg{
    margin:0px 0px 0px 40px; 
}

</style>

<!-- start email service scripts -->
<apex:includeScript value="/soap/ajax/22.0/connection.js"/>
<link rel="stylesheet" href="https://ajax.googleapis.com/ajax/libs/jqueryui/1.8.10/themes/base/jquery-ui.css" id="theme" />
<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.5.1/jquery.min.js"></script>
<script src="https://ajax.googleapis.com/ajax/libs/jqueryui/1.8.10/jquery-ui.min.js"></script>

<script>
sforce.connection.sessionId = '{!$Api.Session_ID}';

//context user
var ContextUserId;

function getUserId(username){
    var soql = "select Id, Name from User where Name = '" + username + "'";
    var result = sforce.connection.query(soql, {onSuccess : setUser, onFailure : function(){} });
}

function setUser(result){
    var records = result.getArray("records");
    ContextUserId = records[0].Id;
    //alert(records[0].Id + ' - ' + records[0].Name);
}

//email objects
function createEmailServicesFunction(){

    document.getElementById('errorbox').innerHTML = '';
    
    var esf = new sforce.SObject("EmailServicesFunction");
    
    ////Email Service Information
    esf.FunctionName = '{!ServiceName}';
    esf.ApexClassId = '{!ProcMsgId}';   
    esf.AttachmentOption = 3;                //accept all attachments       
    esf.AuthorizedSenders = '';              //blank is everybody
    esf.IsTextTruncated = true;
    esf.IsTextAttachmentsAsBinary = false;            
    esf.IsActive = true;
    
    ////Failure Response Settings [1 = bounce, 2 = discard, 3 = requeue]
    esf.OverLimitAction = 3;        
    esf.AddressInactiveAction = 2;    
    esf.FunctionInactiveAction = 2;
    esf.AuthenticationFailureAction = 2;
    esf.AuthorizationFailureAction = 2;
    esf.IsErrorRoutingEnabled = true;
    esf.ErrorRoutingAddress = $('#pg\\:frmPop\\:pbPop\\:pbsPop\\:pbsiPop2\\:ErrorRoutingAddress').val();

    var result = sforce.connection.create([esf], {onSuccess : createEmailServicesAddress, onFailure : failed});

}

function createEmailServicesAddress(result) {

    var msg = '';
    if (result[0].getBoolean("success")) {
        //msg = "Success! <a href='https://na7.salesforce.com/email/admin/detailEmailServicesFunction.apexp?id=" + result[0].id + "'>Click here for your new email service</a>";

        var esa = new sforce.SObject("EmailServicesAddress");
    
        esa.FunctionId = result[0].id;;
        
        esa.LocalPart ='{!AddressName}';
        esa.IsActive = true;
        esa.RunAsUserId = ContextUserId; //$('#pg\\:frmPop\\:pbPop\\:pbsPop\\:pbsiPop1\\:ContextUser').val(); 
        esa.AuthorizedSenders = '';        //blank is everybody
            
        var result = sforce.connection.create([esa], {onSuccess : success, onFailure : failed});
    } 
    else {
        //msg = "Failure: " + result[0];
        msg += '<p/>' + result[0].getArray("errors")[0].getArray("message")[0] + '<p/>';
        document.getElementById('errorbox').innerHTML += msg;
    }     
    
}

function success(result) {
    var msg = '';
    if (result[0].getBoolean("success")) {
        //msg = "Success! <a href='https://na7.salesforce.com/email/admin/detailEmailServicesAddress.apexp?id=" + result[0].id + "'>Click here for your new email address</a>";
        $('#EmailServiceForm').dialog('close');
    } 
    else {
        //msg = "Failure: " + result[0];
        msg += '<p/>' + result[0].getArray("errors")[0].getArray("message")[0] + '<p/>';
        document.getElementById('errorbox').innerHTML += msg;  
    }      
}

function failed(error) {
    var msg = "<br/>Failed. Error is: " + error;
    document.getElementById('errorbox').innerHTML += msg;
}

//switch form to popup dialog
$(function() {
    $('#EmailServiceForm').dialog({
        //height: 200,
        width: 650,
        autoOpen: false,
        resizable: false,
        show:'fade',
        hide:'fade',
        title:'Create New Email Service',
        modal: true, 
        close: refreshPanel
    });

});

//manual instructions
/* unused always hidden
$(document).ready(function() {
    if({!SupportsApi}) $('#pg\\:frmMain\\:pbMain\\:pbIncoming\\:opManual').hide();
});

function toggleMan(){
    $('#manual').toggle(200);
}
*/
</script>
<!-- end email service scripts -->

<!-- start email service popup -->
<div id="EmailServiceForm" style="display: none;" >
<apex:form id="frmPop">
<apex:pageBlock id="pbPop">
    <apex:pageBlockSection columns="1" id="pbsPop" >

        <apex:pageBlockSectionItem id="pbsiPop1">
            <apex:outputLabel value="Context User"/>
            <apex:inputField value="{!holder.OwnerId}" id="ContextUser" onchange="getUserId($('#pg\\:frmPop\\:pbPop\\:pbsPop\\:pbsiPop1\\:ContextUser').val());"  />
        </apex:pageBlockSectionItem>
        
        <apex:pageBlockSectionItem >
            <apex:outputLabel value="" />
            <apex:outputPanel >
            This user will appear as the Created By user for new records created by Email to Case Premium.
            </apex:outputPanel>
        </apex:pageBlockSectionItem>
       
        <apex:pageBlockSectionItem id="pbsiPop2">
            <apex:outputLabel value="Error Routing Email Address" style="white-space:nowrap;"/>
            <apex:outputPanel >
                <div class="requiredInput">
                    <div class="requiredBlock"></div>
                    <apex:inputText id="ErrorRoutingAddress" size="40"/>
                </div>
            </apex:outputPanel>
        </apex:pageBlockSectionItem>
        
         <apex:pageBlockSectionItem >
            <apex:outputLabel value="" />
            <apex:outputPanel >
            Notification error emails will be sent to this email address instead of the sender&apos;s email address and prevents the sender being notified when email services cannot process an incoming email.
            </apex:outputPanel>
        </apex:pageBlockSectionItem>
        
        <apex:pageBlockSectionItem >
            <apex:outputLabel value="" />
            <input id="CreateEmailService" class="btn" type="button" value="Create Email Service" onclick="createEmailServicesFunction();" />
        </apex:pageBlockSectionItem>
       
        <apex:pageblockSectionItem >
            <apex:outputLabel value="" />
            <apex:outputPanel >
                <div id="errorbox" style="color:red;" />
            </apex:outputPanel>
        </apex:pageblockSectionItem>
    </apex:pageBlockSection>
</apex:pageBlock>
</apex:form>
</div>
<!-- end email service popup -->

    <apex:sectionHeader title="Email to Case Premium" subtitle="Preferences Configuration" help="http://www.ic-2000.com/support.asp" />
    
    <apex:pageMessages showDetail="false" />
    
    <apex:form id="frmMain">
    <apex:pageBlock title="Initial Setup" id="pbMain"> 
        
        <apex:facet name="header">
            <apex:outputpanel >
            <table width="100%">
            <tr>
            
            <td style="width:75%; text-align:center;">
                <apex:commandButton action="{!next}" value="Next"/>
            </td>
            
            <td style="text-align:right;">
                <!--pageJumper start-->
                <apex:outputPanel >
                     <apex:actionStatus id="pjStatus">
                        <apex:facet name="start">
                            <apex:outputtext value="{!pj.statusText}"/> 
                        </apex:facet>
                        <apex:facet name="stop">
                            <apex:outputpanel >
                                <apex:outputLabel for="pagejump" value="Jump to "/>
                                <apex:selectList value="{!pj.currentPage}"  id="pagejump" size="1">
                                    <apex:selectOptions value="{!pj.allPages}"/>
                                    <apex:actionSupport event="onchange" action="{!pj.goToPage}" status="pjStatus"/>
                                </apex:selectList> 
                            </apex:outputpanel>
                        </apex:facet>
                    </apex:actionStatus>
                </apex:outputpanel>
                <!--pageJumper end-->
            </td>
            
            </tr>
            </table>
            </apex:outputPanel>
        </apex:facet>
        
        <apex:facet name="footer">
            <apex:outputpanel >
            <table width="100%">
            <tr>
            <td style="width:75%; text-align:center;">
                <apex:commandButton action="{!next}" value="Next"/>
            </td>
            <td>
            </td>
            </tr>
            </table>
            </apex:outputPanel>
        </apex:facet>
            


<p>Welcome to Email to Case Premium. You will need a few minutes to setup your organization and configure the application.</p>
<br/>
<!-- start email service -->
<apex:actionFunction action="{!doNothing}" name="refreshPanel" reRender="opEmailService" />
<apex:pageBlockSection columns="1" title="1. Incoming Email Routing" id="pbIncoming">

    <apex:outputPanel id="opEmailService" rendered="{!SupportsAPI}">
        <apex:outputPanel rendered="{!ExistingService.size == 0}" >
        An Email Service must be created for incoming emails to be processed by Email to Case Premium.
        <br/>
        <input class="btn" id="btnCreateService" type="button" value="Create New Email Service" onclick="$('#EmailServiceForm').dialog('open');"/>
        <br/><br/>
        </apex:outputPanel>
    
        <apex:outputPanel rendered="{!ExistingService.size != 0}">
        An Email Service exists for Email to Case Premium. 
        <input class="btn" type="button" value="View" onclick="window.open('/email/admin/detailEmailServicesFunction.apexp?id={!ExistingService[0].Id}')" />
        <br/>
        </apex:outputPanel>
        
        <apex:outputPanel rendered="{!ExistingService.size != 0 && ExistingAddress.size == 0}" >  
        A routing address must be created for the Email Service. Click the View button above and select New Email Address.
        </apex:outputPanel>
        
        <apex:outputPanel rendered="{!ExistingAddress.size != 0}" >  
        Your email routing address: <b><font color="green">{!ExistingAddress[0].LocalPart}@{!ExistingAddress[0].EmailDomainName}</font></b>
        <p>
        For testing, you may want to have your IT department setup supporttest@yourcompany.com to forward to the routing address above. When you are ready to move to production, you can have your IT department forward emails addressed to support@yourcompany.com to that routing address as well.
        </p>
        </apex:outputPanel>
    </apex:outputPanel>

    <apex:outputPanel id="opManual" rendered="{!NOT(SupportsAPI)}">
        <p>
        <b>a. New Email Service: </b>
        <a href="/email/admin/editEmailServicesFunction.apexp" target="_blank">Click
        here to add an Email Service</a> or navigate to <i>Setup &gt; Develop &gt;
        Email Services</i> <i>and click New Email Service.</i> Provide a common name
        such as Email to Case Premium, and select the ProcessMessage class for the
        Apex Class field. We recommend using the settings as pictured below,
        however you may set them as you see fit for your organizations needs. When
        finished, click Save and New Email Address
        </p>
        
        <p>
        <apex:image url="{!$Resource.E2CP__image003_0}" width="621" height="443" styleClass="helpimg" />
        </p>
        
        <p>
        <b>b. Email Service Address: </b>
        Choose an email address name for internal use. In the example below, we suggest "e2cpremium", but you can use whatever you like. This address will not be exposed to your customers. The "Active" box should be checked by default.
        </p>
        
        <p>
        For the "Context User", we recommend using a dedicated API user account if you have one. This user will appear as the Created By user for new records created by Email to Case Premium. In most instances, you will want to use the same User Account specified as the <a href=" /_ui/support/organization/SupportOrganizationSetupUi/d?setupid=CaseSettings" target="_blank">"Automated Case User" in Support Settings.</a>
        </p>
        <p>
        <u>Be sure to clear the Accept Email From field unless you want to restrict who can use Email to Case Premium.</u>
        </p>
        
        <p>
        <apex:image url="{!$Resource.E2CP__image004}" width="620" height="290" styleClass="helpimg" />
        </p>
        
        <p>
        <b>c. Setup Forwarding: </b>
        After you click save, you will return to
        the main Email Service screen and you will see the routing address assigned by
        Salesforce.com, <a name="thePage_theForm_pageBlock2_addressTable_"><span
        style='font-size:9.0pt;line-height:115%;font-family:Arial;color:#333333'>in the
        example below: </span></a><a
        href="mailto:e2cpremium@j-67885q4x4pp12gryef7s87erz.in.salesforce.com"><span
        style='font-size:9.0pt;line-height:115%;font-family:Arial'>e2cpremium@j-67885q4x4pp12gryef7s87erz.in.salesforce.com</span></a><span
        style='font-size:9.0pt;line-height:115%;font-family:Arial;color:#333333'>. For
        testing, you may want to have your IT department setup </span><a
        href="mailto:supporttest@yourcompany.com"><span style='font-size:9.0pt;
        line-height:115%;font-family:Arial'>supporttest@yourcompany.com</span></a><span
        style='font-size:9.0pt;line-height:115%;font-family:Arial;color:#333333'> to
        forward to the routing address assigned to you. When you are ready to move to
        production, you can have your IT department forward emails addressed to </span><a
        href="mailto:support@yourcompany.com"><span style='font-size:9.0pt;line-height:
        115%;font-family:Arial'>support@yourcompany.com</span></a><span
        style='font-size:9.0pt;line-height:115%;font-family:Arial;color:#333333'> to
        that routing address as well.</span></p>
        
        <p>
        <apex:image url="{!$Resource.E2CP__image009}" width="620" height="153" styleClass="helpimg" />
        </p>
    </apex:outputPanel>
</apex:pageBlockSection>

<apex:pageBlockSection columns="1" title="2. Outgoing Email Routing" >
    <apex:outputPanel >
    <p>
    By setting up an Organization Wide Address, we can be sure that when customers reply to new
    comment emails sent from Salesforce.com, the replies are returned to your Email
    to Case Premium routing address rather than your support agent&apos;s personal mailbox.
    </p>
    
    <p>
    <a href="/0D2/e" target="_blank">Click here to add an Organization Wide Address</a> or navigate to <i>Setup > Email Administration > Organization-Wide Addresses</i> and click Add. 
    In the example below, we use supporttest@yourcompany.com to aid with initial testing.  Click Save.
    </p>
    
    <p>
    <apex:image url="{!$Resource.E2CP__image007}" width="620" height="312" styleClass="helpimg" />
    </p>
    
    <p>
    <b>Note: When you add a new organization-wide address, it must be verified as a valid email address before becoming available for use. If the email address you entered is already forwarding to the salesforce.com routing address you created earlier, a new case will be created out of the verification email.  If you have not received your verification email/case, click Resend to have another one sent.</b>
    </p>
    </apex:outputPanel>
</apex:pageBlockSection>

<apex:pageBlockSection columns="1" title="3. Custom New Comment Page" >
    <apex:outputPanel >

    <p>
    <b>a. Case Page Layouts:</b>
    You must add a button to your case page layouts to be able to access the custom New Comment page included 
    with the package.
    <a href="/ui/setup/layout/PageLayouts?type=Case&amp;setupid=CaseLayouts" target="_blank">Click
    here to access Case Page Layouts</a> or browse to <i>Setup &gt; Customize &gt;
    Cases &gt; Page Layouts</i> and click on Edit next to the page layout you want to
    work with. Drag and drop the New Comment button to the custom buttons area
    of the page layout. Save the page layout. Note, if you are unable to see the
    button, check the Page Layout Assignment. We do not recommend adding the New Comment button to page layouts assigned to Customer Portal users.
    </p>
    
    <p>
    <apex:image url="{!$Resource.E2CP__image011}" width="620" height="321" styleClass="helpimg" style="border:1px solid black;"/>
    </p>
    
    <p>
    Additionally, we supply a custom sidebar component to override the comment related list New button. For details, please see <a href="http://www.ic-2000.com/support.asp?sid=50140000000O8JQ" target="_new">this solution</a>.
    </p>
    
    <p>
    <b>b. Page Permissions:</b> You must assign profile permissions for the New Comment page.
    <a href="/_ui/common/config/profile/ApexPageProfilePermissionEdit/e?apex_id={!NewCmtPageId}&apex_name=New_Comment&apex_namespace=E2CP&save_button=has_save_button&setupid=ApexPages" 
    target="_blank">Click here and move desired profiles to the Enabled box.</a>
    </p>
    </apex:outputPanel>
</apex:pageBlockSection>

        </apex:pageBlock>
    </apex:form>
    
    <script>
    //overwrite help
    var hlinks = getElementsByClassName('links')[0];
    hlinks.innerHTML = '<a href="http://www.ic-2000.com/support.asp" target="_new">Knowledge Base</a> | <a href="mailto:e2cpremium@ic-2000.com">e2cpremium@ic-2000.com</a> | +1.609.570.7200 <img src="/s.gif" alt="Help" class="helpIcon" title="Help">';
    hlinks.innerHTML += '<br/><div style="font-size:smaller">Free implementation assistance is available via email or phone.</div>';    
    
    hlinks.style.fontSize = 'larger';
    hlinks.style.position = 'absolute';
    hlinks.style.float  = 'right';
    hlinks.style.right = '0%';
    
    //elements by CSS style
    function getElementsByClassName(className) {
        var hasClassName = new RegExp("(?:^|\\s)" + className + "(?:$|\\s)");
        var allElements = document.getElementsByTagName("*");
        var results = [];
    
        var element;
        for (var i = 0; (element = allElements[i]) != null; i++) {
            var elementClass = element.className;
            if (elementClass && elementClass.indexOf(className) != -1 && hasClassName.test(elementClass))
                results.push(element);
        }
    
        return results;
    }
    
    </script>
    
</apex:page>