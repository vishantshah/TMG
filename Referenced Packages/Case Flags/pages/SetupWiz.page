<apex:page controller="FLAGS.SetupWizCtrl" id="pg" tabStyle="Setup_Wizard__tab">
<style>
.seeMore a {position:relative;z-index:70;}
.seeMore a {z-index:101;}
.seeMore a span {display: none;z-index:90;}

.seeMore a:hover span {display: block;position:absolute;
    top:1em; padding:5px; left:5em; width:30em; border:1px solid #0cf; z-index:100;
    background-color:#eff; color:black;}
    

</style>
<apex:sectionHeader title="Case Flags" subtitle="Setup Wizard" help="http://www.ic-2000.com/support.asp"/>
<apex:form id="frm" >
    
    <apex:pageMessages showDetail="false" />
    <apex:actionFunction action="{!refreshPage}" name="refreshPage" reRender="flagSection"/>
    <apex:actionFunction action="{!radioChange}" name="radioChange" reRender="generalSection,SFDCSetup"/>
    
    <apex:pageBlock >
    
        <apex:pageBlockSection Title="Introduction" columns="2">
        <apex:outputPanel >
            Case Flags is a purpose-built add-on for Salesforce that helps you monitor your organization’s response times with cases, at a glance, via color coded flags. Case Flags allows you to quickly view cases requiring responses to customers.
            <ul>
                <li>Eliminate case neglect</li>
                <li>Avoid SLA violations</li>
                <li>Measure &quot;Initial Response&quot; (even in business hours)</li>
            </ul>
        </apex:outputPanel>
        <apex:outputPanel style="float:right;">
            <iframe style="z-index:0;" width="350" height="208" src="https://www.youtube.com/embed/__6vmZpf87c?wmode=opaque" frameborder="0"></iframe><br/>
            <div style="text-align:center">
                About Case Flags
            </div>
        </apex:outputPanel>
        </apex:pageBlockSection>
    
    </apex:pageBlock>
    
    <apex:pageBlock id="pgBlk" >
    
        <apex:pageBlockButtons >
            <apex:commandButton action="{!save}" value="Save"/>
        </apex:pageBlockButtons>
        
        <apex:pageBlockSection columns="2" id="generalSection" title="General Setup">
            <apex:pageBlockSection columns="1">
            
           
                <apex:pageBlockSectionItem helpText="Enter a comma separated list of user ids which should not clear the case flag when adding a comment. Typically, this would be for application context users who perform automated tasks.">
                    <apex:outputLabel value="API Users"/>
                    <apex:outputPanel >
                        <apex:inputField value="{!dummyObject.AuthorId}" style="width:225px;" required="false"/> <apex:commandButton value="Add" action="{!addUser}"/> <br/>
                        <apex:inputField value="{!fp.FLAGS__ExcludedUsers__c}" style="width:425px;"/>
                    </apex:outputPanel>
                </apex:pageBlockSectionItem>
                <apex:pageBlockSectionItem id="formatRadio">
                    <apex:outputLabel >Hours</apex:outputLabel>
                    <apex:outputPanel >
                        <apex:selectRadio value="{!formatSelection}" onchange="radioChange();">
                            <apex:selectOption itemLabel="Standard Hours" itemValue="24"></apex:selectOption>
                            <apex:selectOption itemLabel="Business Hours" itemValue="Business"></apex:selectOption>
                        </apex:selectRadio>
                        <apex:outputText rendered="{!IF(formatSelection == 'Business',TRUE,FALSE)}">
                            Case Flags will exclude time elapsed outside of your company’s normal hours of operation. For example, if your company’s business hours are 8am to 6pm Mon-Fri, and a customer submits a case comment at 5pm on Friday, Case Flags will count 1 hour. Then at 6pm it will stop counting time until Monday at 8am when it will resume.&nbsp;
                            <apex:outputLink value="/01m" target="_blank">See your company&#39;s business hours.</apex:outputLink>
                        </apex:outputText>
                    </apex:outputPanel>
                    
                </apex:pageBlockSectionItem>
             </apex:pageBlockSection>
        </apex:pageBlockSection>
        
        <apex:pageBlockSection id="advanceSetupSection" columns="1" title="Optional Setup" >
            <apex:pageBlockSectionItem helpText="Enter the domain from which your company's email is sent. This is used to distinguish between emails from your users and those from customers when setting or clearing the flag. For a complete description of the behavior, refer to the chart below.">
                <apex:outputLabel value="Company Domain"/>
                <apex:inputField value="{!fp.FLAGS__CompanyDomain__c}" style="width:220px;"/>
            </apex:pageBlockSectionItem>
            <apex:pageBlockSectionItem helpText="A private comment can be added to the case if a trigger cannot update flag fields, usually due to validation rules error.">
                <apex:outputLabel value="Add Error Comments"/>
                <apex:inputField value="{!fp.FLAGS__InsertTriggerErrorComments__c}"/>
            </apex:pageBlockSectionItem>   
            <apex:pageBlockSectionItem rendered="{!fp.FLAGS__UseFuture__c || BizHoursCount > 1}" helpText="Apex Future methods will be used to set the custom Business Hours lookup on new cases. It is only necessary to enable this if your organization actively uses multiple sets of business hours and you have escalation rules that switch cases to non-default hours. Note that these jobs will count against certain Salesforce resource usage limits.">
                <apex:outputLabel value="Use Jobs to Set Case Hours"/>
                <apex:inputField value="{!fp.FLAGS__UseFuture__c}"/>
            </apex:pageBlockSectionItem>   
        </apex:pageBlockSection>
                
        
        <apex:pageBlockSection id="flagSection" columns="2" title="Flags">
            <apex:pageBlockSection columns="1">
                <apex:pageBlockSectionItem >
                    <apex:outputLabel value="" />
                    Choose the flag icons and when to set them.
                </apex:pageBlockSectionItem>               
                <apex:pageBlockSectionItem >
                    <apex:outputLabel value="Flag 1"/>
                    <apex:outputPanel id="list2">
                        <apex:image value="/servlet/servlet.FileDownload?file={!fp.FLAGS__Offset1Image__c}" style="margin-right:5px;"/>
                        After <apex:inputField value="{!fp.FLAGS__TimeOffset1__c}" style="margin-left:5px;margin-right:5px;width:40px;"/> Hours        
                        <apex:selectList multiselect="false" size="1" onchange="refreshPage();" style="margin-left:20px;" value="{!fp.FLAGS__Offset1Image__c}">
                            <apex:selectOptions value="{!FlagImageOptions}"/>
                        </apex:selectList>
                        <apex:inputField value="{!fp.FLAGS__Offset1Image__c}" rendered="false"/>
                    </apex:outputPanel>
                </apex:pageBlockSectionItem>
                <apex:pageBlockSectionItem >
                    <apex:outputLabel value="Flag 2"/>
                    <apex:outputPanel id="list3">
                        <apex:image value="/servlet/servlet.FileDownload?file={!fp.FLAGS__Offset2Image__c}" style="margin-right:5px;"/>
                        After <apex:inputField value="{!fp.FLAGS__TimeOffset2__c}" style="margin-left:5px;margin-right:5px;width:40px;"/> Hours        
                        <apex:selectList multiselect="false" size="1" onchange="refreshPage();" style="margin-left:20px;" value="{!fp.FLAGS__Offset2Image__c}">
                            <apex:selectOptions value="{!FlagImageOptions}"/>
                        </apex:selectList>
                        <apex:inputField value="{!fp.FLAGS__Offset2Image__c}" rendered="false"/>
                    </apex:outputPanel>
                </apex:pageBlockSectionItem>
                <apex:pageBlockSectionItem >
                    <apex:outputLabel value="Flag 3"/>
                    <apex:outputPanel id="list4">
                        <apex:image value="/servlet/servlet.FileDownload?file={!fp.FLAGS__Offset3Image__c}" style="margin-right:5px;"/>
                        After <apex:inputField value="{!fp.FLAGS__TimeOffset3__c}" style="margin-left:5px;margin-right:5px;width:40px;"/> Hours        
                        <apex:selectList multiselect="false" size="1" onchange="refreshPage();" style="margin-left:20px;" value="{!fp.FLAGS__Offset3Image__c}">
                            <apex:selectOptions value="{!FlagImageOptions}"/>
                        </apex:selectList>
                        <apex:inputField value="{!fp.FLAGS__Offset3Image__c}" rendered="false"/>
                    </apex:outputPanel>
                </apex:pageBlockSectionItem>
                <apex:pageBlockSectionItem >
                    <apex:outputLabel value="" />
                    You may also add custom icons by uploading them to the Case Flags Documents folder in the Documents tab. Image files should be either GIF or PNG and 16x16. After uploading graphic files to Documents, you must refresh this page to be able to select them. <a href="/015?fcf={!ImageFolderId}" target="_blank">Click here to add custom icons</a>.
                </apex:pageBlockSectionItem>
            </apex:pageBlockSection>
            <apex:outputPanel >
                <apex:image value="{!URLFOR($Resource.Case_Flags_Assets,'case-flags-assets/flag-example.png') }" style="float:right;"/>
            </apex:outputPanel>
        </apex:pageBlockSection>
        
        <apex:pageBlockSection columns="2" title="Event Rules">
            <apex:pageBlockSection columns="1">
                <apex:pageBlockSectionItem >
                    <apex:outputLabel >Case Status</apex:outputLabel>
                    <apex:outputPanel styleClass="seeMore">
                        <apex:inputField id="setOnCCreate" value="{!fp.FLAGS__SetOnCaseCreate__c}"/> 
                        <apex:outputLabel for="setOnCCreate"><strong>Set flag on case creation</strong></apex:outputLabel> <br/>
                        Select if you want the case flag to automatically be set when a new case is created. <br/>
                        <apex:outputLink >See Logic<span>Case is created.</span></apex:outputLink>
                        <br/><br/>
                        <apex:inputField id="clearOnCClose" value="{!fp.FLAGS__ClearOnCaseClose__c}"/> 
                        <apex:outputLabel for="clearOnCClose"><strong>Clear flag on case close</strong></apex:outputLabel> <br/>
                        Select if you want the case flag to automatically clear when the case has been closed.<br/>
                        <apex:outputLink >See Logic<span>Case is updated to have a closed status.</span></apex:outputLink>
                        <br/><br/>
                    </apex:outputPanel>
                </apex:pageBlockSectionItem>
                <apex:pageBlockSectionItem >
                    <apex:outputLabel >Email to Case</apex:outputLabel>
                    <apex:outputPanel styleClass="seeMore">
                        <apex:inputField id="setOnInbound" value="{!fp.FLAGS__AllowWriteAfterEmail__c}"/> 
                        <apex:outputLabel for="setOnInbound"><strong>Set flag on inbound email</strong></apex:outputLabel> <br/>
                        Select if you want the case flag to automatically be set after a customer has sent an email to the case.<br/>
                        <apex:outputLink >See Logic<span>Inbound equals True<br/>Email domain not equal to company domain (if supplied)</span></apex:outputLink>
                        <br/><br/>
                        <apex:inputField id="clearOnOutbond" value="{!fp.FLAGS__AllowClearAfterEmail__c}"/> 
                        <apex:outputLabel for="clearOnOutbond"><strong>Clear flag on outbound email</strong></apex:outputLabel> <br/>
                        Select if you want the case flag to automatically clear after a user has sent an email to the customer.<br/>
                        <apex:outputLink >See Logic<span>Inbound equals False<br/>Email domain equals company domain (if supplied)</span></apex:outputLink>
                        <br/><br/>
                    </apex:outputPanel>
                </apex:pageBlockSectionItem>
                <apex:pageBlockSectionItem >
                    <apex:outputLabel >Web Portal</apex:outputLabel>
                    <apex:outputPanel styleClass="seeMore">
                        <apex:inputField id="setOnCustComment" value="{!fp.FLAGS__AllowWriteAfterComment__c}"/> 
                        <apex:outputLabel for="setOnCustComment"><strong>Set flag on customer comment</strong></apex:outputLabel> <br/>
                        Select if you are using either the Self Service or Customer Portals and would like the flag set on cases when a customer adds a comment.<br/>
                        <apex:outputLink >See Logic<span>Public equals True<br/>Self-service user equals true OR user profile contains &quot;portal&quot; OR user is listed in API User list above</span></apex:outputLink>
                        <br/><br/>
                        <apex:inputField id="clearOnUserComment" value="{!fp.FLAGS__AllowClearAfterComment__c}"/> 
                        <apex:outputLabel for="clearOnUserComment"><strong>Clear flag on user comment</strong></apex:outputLabel> <br/>
                        Select if you are using either the Self Service or Customer Portals and would like the flag to clear when a user adds a comment.<br/>
                        <apex:outputLink >See Logic<span>Public equals True<br/>Self-service user equals False AND user profile does not contain &quot;portal&quot;<br/> CreatedBy Does Not Equal API User(s)</span></apex:outputLink>
                        <br/><br/>
                    </apex:outputPanel>
                </apex:pageBlockSectionItem>
            
            
            </apex:pageBlockSection>
            <apex:outputPanel >
                <apex:image value="{!URLFOR($Resource.Case_Flags_Assets,'case-flags-assets/flag-diagram.png') }" style="float:right;"/>
       
            </apex:outputPanel>
           
            
        </apex:pageBlockSection>

        <apex:pageBlockSection id="SFDCSetup" columns="2" title="Salesforce Setup">
            <apex:pageBlockSection columns="1">
            
                <!-- <apex:pageBlockSectionItem >
                <apex:outputLabel value="" />
                You must modify your case page layouts and/or case views to use the Case Flags functionality. If you intend to use the age in business hours then you must create a scheduled job as well.
                </apex:pageBlockSectionItem> -->
                
                <apex:pageBlockSectionItem >
                    <apex:outputLabel value="Page Layout" />
                    <apex:outputPanel >
                    
                        In order to see the flag on the case page, you must add the field to your page layout(s).
                        <p/>
                        1. Go to Setup > Customize > Cases > Page Layouts. <a target="_blank" href="/ui/setup/layout/PageLayouts?type=Case&setupid=CaseLayouts">(click here to go there now)</a><br/>
                        2. Choose &quot;Edit&quot; next to the layout(s) you want to update. <br/>
                        3. Locate the &quot;Case Flag{!addBusiness}&quot; field and drag it onto your layout. <br/>
                        4. Optional: Locate the Initial Response and Initial Response{!addBusiness} Hours fields, and drag them onto your layout(s).
                        <p/>
                        Optional: Two custom buttons are available to manually clear and set the flag.
                        <p/>
                        1. While still on the case page layout, click &quot;Buttons&quot; on the left, then drag and drop the &quot;Clear Flag&quot; and &quot;Set Flag&quot; buttons to the &quot;Custom Buttons&quot; area of the page layout.  <br/>
                        2. Click &quot;Save&quot;.<br/>
                        3. To grant profilese the ability to manually Clear a flag via a custom button on the case page, <a href="/_ui/common/config/profile/ApexPageProfilePermissionEdit/e?apex_id={!ClearFlagPageId}&apex_name=FlagClear&apex_namespace=FLAGS&save_button=has_save_button&setupid=ApexPages" 
    target="_blank">click here and move desired profiles to the Enabled box.</a> <br/>
                        4. To grant profiles the ability to manually Set a flag via a custom button, <a href="/_ui/common/config/profile/ApexPageProfilePermissionEdit/e?apex_id={!SetFlagPageId}&apex_name=FlagNow&apex_namespace=FLAGS&save_button=has_save_button&setupid=ApexPages" 
    target="_blank">click here and move desired profiles to the Enabled box.</a>
                    
                    
                    </apex:outputPanel>
                </apex:pageBlockSectionItem>
                
                <apex:pageBlockSectionItem >
                    <apex:outputLabel value="List Views" />
                    <apex:outputPanel >
                    
                    The flag field can also be added to your case list views.
                    <p/>
                    1. While displaying a case view, click &quot;Edit&quot; above the header bar to enter the view setup tool. <br/>
                    2. In the &quot;Available Fields&quot; box, select the &quot;Case Flag&quot; item and click the &quot;Add&quot; arrow. Position the field using the arrows to the right of the &quot;Selected Fields&quot; box.<br/>
                    3. Click &quot;Save&quot;.<br/>
                    <p/>
                    Optional: Two custom buttons are available to clear and set the flags on multiple cases from list views. (Note: All users will have access to set and clear flags via these buttons.)
                    <p/>
                    1. <a target="_blank" href="/ui/setup/layout/ListLayouts?type=Case&setupid=CaseSearchLayouts">Click here to open Case Search Layouts.</a><br/>
                    2. Edit Cases List View or Seach Results and then move &quot;Set Flags&quot; and &quot;Clear Flags&quot; into the &quot;Selected Buttons&quot; panel.
                    
                    
                    </apex:outputPanel>
                </apex:pageBlockSectionItem>
      
            </apex:pageBlockSection>
            <apex:outputPanel >
                <apex:image value="{!URLFOR($Resource.Case_Flags_Assets,'case-flags-assets/case-detail.png') }" style="float:right;"/>
       
                <apex:image value="{!URLFOR($Resource.Case_Flags_Assets,'case-flags-assets/list-view.png') }" style="float:right;margin-top:100px;"/>
            </apex:outputPanel>
        </apex:pageBlockSection>
    
    </apex:pageBlock>
    
</apex:form>
<script>
    //overwrite help
    var hlinks = getElementsByClassName('links')[0];
    hlinks.innerHTML = '<a href="http://www.ic-2000.com/support.asp" target="_new">Knowledge Base</a> | <a href="mailto:caseflags@internetcreations.com">caseflags@internetcreations.com</a> | +1.609.570.7200 <img src="/s.gif" alt="Help" class="helpIcon" title="Help">';
    hlinks.innerHTML += '<br/><div style="font-size:smaller">Free implementation assistance is available via email or phone.</div>';    
    
    hlinks.style.fontSize = 'larger';
    hlinks.style.position = 'absolute';
    hlinks.style.float  = 'right';
    hlinks.style.right = '0%';
    
    //elements by CSS style
    function getElementsByClassName(className) {
        var hasClassName = new RegExp("(?:^|\\s)" + className + "(?:$|\\s)");
        var allElements = document.getElementsByTagName("*");
        var results = [];
    
        var element;
        for (var i = 0; (element = allElements[i]) != null; i++) {
            var elementClass = element.className;
            if (elementClass && elementClass.indexOf(className) != -1 && hasClassName.test(elementClass))
                results.push(element);
        }
    
        return results;
    }

    twistSection(document.getElementById("{!$Component.pg.frm.pgBlk.advanceSetupSection}").childNodes[0].childNodes[0]);

    </script>

</apex:page>